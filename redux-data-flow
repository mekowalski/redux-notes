-Redux architecture revolves around a strict unidirectional data flow
-All data in an application follows the same pattern, make the logic more predictable and easier to
 understand
-Encourages data normalization to not end up with independent copies of the same data

REDUX DATA LIFECYCLE
1. You call store.dispatch()
  -ACTION is plain object describing WHAT HAPPENED
  -A brief snippet of news "Malind liked article 36"
  -Can call store.dispatch(action) from anywhere in app, include Components and XHR callbacks
  eg:
  { type: 'LIKE_ARTICLE', articleID: 36 }
  { type: 'FETCH_USER_SUCCESS', response: {id: 3, name: 'Malind'} }
  { type: 'ADD_TODO', text: 'Read the Redux docs' }

2. Redux STORE calls REDUCER function it's given
  -STORE passes 2 arguments to the REDUCER: currentState and ACTION
  -REDUCER is a pure function, only computes next STATE and should be predictable
  eg:
  //Current app STATE(list of todos and chosen filter)
  let currentState = {
    visibleTodoFilter: 'SHOE_ALL',
    todos; [
      {
        text: 'Read the docs',
        complete: false
      }
    ]
  }

  //Action being performed (adding a todo)
  let action = {
    type: 'ADD_TODO',
    text: 'Understand the flow'
  }

  //Reducer returns the next app STATE
  let nextState = todoApp(currentState, action)

3. Root Reducer may combine multiple REDUCERS' output into a single TREE STATE
  -Root Reducer structure is dependent upon programmer
  -combineReducers() helps split the Root Reducer into separate functions, managing 1 branch of STATE tree
  eg:
  //Two REDUCERS, one for todos list and one for currently selected filter setting
  function todos(state = [], action) {
    ...calculate it
    return nextState
  }

  function visibleTodoFilter(state = 'SHOW_ALL', action) {
    //calculate it
    return nextState
  }

  let todoApp = combineReducers({
    todos,
    visibleTodoFilter
  })

  -When ACTION is emitted, todoApp returned by combineReducers then calls both REDUCERs
  eg:
  let nextTodos = todos(state.todos, action)
  let nextVisibleTodoFilter = visibleTodoFilter(state.visibleTodoFilter, action)

  -Then combines both sets of results into a single STATE tree
  eg:
  return {
    todos: nextTodos,
    visitibleTodoFilter: nextVisibleTodoFilter
  }

4. Redux STORE saves complete STATE tree returned by Root REDUCER
  -New tree is now the next STATE of the application
  -every listener registered with store.subscribe(listener) will be invoked
  -UI may now be updated to reflect new STATE
