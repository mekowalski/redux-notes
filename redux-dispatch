-Persist changes to state
-Display changes to state in the view


BUILDING A COUNTER APPLICATION
let state = {count: 0}
let action = {type: 'INCREASE_COUNT'}

function changeState(state, action) {
  switch (action.type) {
    case 'INCREASE_COUNT':
      return {count: state.count + 1}
    default:
      return state
  }
}
changeState(state, action) => {count: 1}
^^Problem with changeState function, the state never increase beyond one
changeState(state, {type: 'INCREASE_COUNT'}) => {count: 1}
changeState(state, {type: 'INCREASE_COUNT'}) => {count: 1}
changeState(state, {type: 'INCREASE_COUNT'}) => {count: 1}
*It starts with 0 and while changeState function returns one more than tat, the count still returns 0


PERSIST STATE
-Need to persist the change and encapsulate the process in a function
-Reassign STATE to return value of the REDUCER
-The next time changeState is called, it uses the updated STATE in its arguments
-Encapsulate this procedure into a function to be called and persist the changed named DISPATCH
eg:
let state = {count: 0}

function changeState(state, action) {
  switch (action.type) {
    case 'INCREASE_COUNT':
      return {count: state.count + 1}
    default:
      return state
  }
}

function dispatch(action) {
  state = changeState(state, action)
}
dispatch({type: 'INCREASE_COUNT'}) => 1
dispatch({type: 'INCREASE_COUNT'}) => 2
dispatch({type: 'INCREASE_COUNT'}) => 3

-Declare state to equal an object ''{count: 0}'
-Define reducer and new function 'dispatch'
-Call 'disptach' function that calls the 'changeState' function and passed the action object
-It will reference the already declared state and pass that through
-The reducer function returns a new object that has property count
-Finally the 'dispatch' function takes the return value of '{count: 1}' and assigns it to state


RENDERING STATE
-To render this on a page, write a render function that changes the HTML
function render() {
  document.setInnerHTML = state.count
}

-Making sure that the 'render()' function runs every time the 'dispatch' function is called
function dispatch(action) {
  state = changeState(state, action)
  render()
}
