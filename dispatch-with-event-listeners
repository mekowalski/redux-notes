APPLICATION GOAL
-Button click should change the STATE
-STATE change should be rendered

Redux Review
Action -> Reducer -> New State


REBUILD DISPATCH FUNCTION AND REDUCER
1. Pass in an action and previous state to reducer, then reducer should return new state
(To open index.html in Linux from terminal run: google-chrome ./index.html)
eg:
let state = { count: 0}

function changeState(state, action) {
  switch (action.type) {
    case 'INCREASE_COUNT':
      return {count: state.count + 1}
    default:
      return state
  }
}
*In browser console, reducer({count: 0}, {type: 'INCREASE_COUNT'}) => {count: 1}
*But STATE is unchanged still
*Need to assign state to return value of reducer each time reducer is called


2. Wrap execution of reducer in a function that is called dispatch
-Reassign STATE by adding dispatch function to reducer.js file
-DISPATCH function should receive an argument of action
eg:
function dispatch(action) {
  state = changeState(state, action)
}
*Calling dispatch({type: 'INCREASE_COUNT'}) => undefined
*Though the STATE value does change
*This now keeps the state changed(update) and returns the 'state'*
*Currently, this state is not reflected in the HTML*


3. Use render function to display the state
-Function to place the count on the page, name the function render()
eg:
function render() {
  let container = document.getElementById('container')
  container.textContent = state.count
}
*Call render() in browser console and the HTML number is displayed
*Counter is displayed after running dispatch({type: 'INCREASE_COUNT'}) followed by render()
*Reflects the current count

*Since RENDER() and DISPATCH() functions go together, they should be put together
eg:
function dispatch(action) {
  state = reducer(state, action)
  render(
}


4. Initial state set in the reducer
-Initial STATE set to a default argument in the REDUCER
eg:
function reducer(state = {count: 0}, action) {
  switch (action.type) {
    case 'INCREASE_COUNT':
      return {count: state.count + 1}
    default:
      return state
  }
}


let state

function changeState(state = {count: 0}, action) {
  //Reducer code here
}

-Each time the page is opened, the default state should show and not increase
-Include 'dispatch({type: '@@INIT'})' to the end of the JavaScript file


--Integrate dispatch with user event
-dispatch is responsible for updating state and re-rendering, action should be dispatched each
time user clicks, attach 'dispatch' execution to click event

let button = document.getElementById('button')
button.addEventListener('click', function() {
  dispatch({type: 'INCREASE_COUNT'})
})
*now dispatches an action of type increase, updates state then updates view*
*User can call the dispatch method by executing dispatch from inside the callback of an event
handler*
