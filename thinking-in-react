BREAK UI INTO COMPONENT HIERARCHY
-Single Responsibility Principle: component should ideally do only one thing, if it grows it should be
broken down to smaller subcomponents
-UI and data models tend to adhere to information architecture, work of separating UI into components is
often trivial
-After identifying the components in the mock, then arrange into a hierarchy
-Easy to do when components are children of another component


BUILD STATIC VERSION ON REACT
-Building a static version of app that renders data model with building components that reuse other
components and pass data using 'props'
-Props pass data from parent to child, don't use state to build static version because it isn't needed
-Components only have 'render()' methods since this is static
-React has one-way data flow to keep everything modular and fast


PROPS VS STATE
-Both are POJO's
-Both changes trigger render update
-Both are deterministic
-Props: component configurations, immutable as far as the component receiving them, component can't
change its props but is responsible for putting them together
-State: Begins with default value when a component mounts, serializable representation of one point in
time


IDENTIFY MINIMAL REPRESENTATION OF UI STATE
-Trigger changes to underlying data and React makes this easy with state
-Absolute minimal representation of state the app needs and compute everything else needed on demand
  EXAMPLE: Build todo list, keep array of the todo items around, don't keep separate state variable
  for the count
  When wanting to render the todo count, take the length of the todo items array
-Ask 3 questions about each piece of data
  1. Is it passed from parent via props, if yes, it isn't state
  2. Is it unchanged over time, if yes, it isn't state
  3. Is it computable based on any other state or props in component, if yes, it isn't state


IDENTIFY WHERE STATE SHOULD LIVE
-Which component should mutate or own the state
*React is one-way data flow down the component hierarchy*
-It is difficult to understand which component should own what state
***OFTEN MOST CHALLENGING PART FOR NEWCOMERS TO UNDERSTAND***
-To figure it out for each piece of state in your application
  1. Identify every component that renders based on state
  2. Find common owner component (single comp above all the comps that need state in hierarchy)
  3. Common owner or another comp higher up in hierarchy should own state
  4. If a comp doesn't make sense to own state then create new state simply for holding state and add it
  somewhere in hierarchy above common owner comp
