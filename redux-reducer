//refer to redux/examples/todo-list

-All application STATE is stored in a single object
-What's minimal representationof app's STATE as an object
  1. Select visibility filter
  2. Actual list of todo items

-May need to store some data, as well as some UI STATE in the STATE tree but try to keep this separate

REDUCERS: Specify the application's state changes in response to ACTIONS sent to the STORE
ACTIONS: Only described what happened, but now how the app's state changes


HANDLING ACTIONS
-REDUCER is a pure function that takes in the PreviousState and an ACTION, and returnes the NextState
eg: (previousState, action) => nextState

-It's called a REDUCER because it's a function that would pass to:
 Array.prototype.reducer(reducer, ?initialValue)

-REDUCER should always stay pure
-What should never be inside a REDUCER
  *Mutation of its arguments
  *Perform side effects like API calls and routing transitions
  *Call non-pure functions eg: Date.now(), Math.random(), etc

-It should only calculate the nextState and return it
*No surprises, side effects, API calls, mutations
*Just a calculation

-Redux calls REDUCER with an undefined STATE for the first time
-Allowing return of initial STATE of application

-Create a copy with Object.assign() as to not mutate the STATE
*Must supply an empty object as first parameter
eg:
  return Object,assign({}, state, {
    ...code here
  })

-Returning the previous STATE in the default case of a SWITCH statement is important for returning any
 unknown action

-Multiple REDUCERS manage its own part of the Global STATE
-STATE parameter is different for every REDUCER and corresponds to the part of STATE that it manages
-When an app becomes larger, REDUCERS can be split into separate files to keep completely independent and
 mange different data


HANDLING MORE ACTIONS
-In examples/todo-list there are 3 actions total, already handling SET_VISIBILITY_FILTER, need to handle
 ADD_TODO & TOGGLE_TODO
