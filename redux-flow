-Pure functions update application state
-Fundamentals of Redux flow
-Adhere to constraints of pure functions


REVIEW
-All state is a JavaScript Object, that actions are in another JavaScript object called an ACTION
-Somehow action updates the state:
let state = {count: 0}
let action = {type: 'INCREASE_COUNT'}

How to sent this action to state to update the state to:
state -> {count: 1}


FUNCTION TO THE RESCUE
-Write a function to take in previous state, action and produce a new state
eg:
function changeState(state, action) {
  if (action.type === 'INCREASE_COUNT') {
    return {count: state.count + 1}
  }
}
*If action's type property is String INCREASE_COUNT, then increment and return new state
*action.type: action always needs type property so the function knows what to do*

-Customary yo use switch case statements, conditionals would become messy
function changeState(state, action) {
  switch(action.type) {
    case 'INCREASE_COUNT':
      return {count: state.count + 1}
  }
}
*very explicit and clear that action.type is information switching on how to change state*

-Important that state never returns null or undefined, cover this with default case in the function
function changeState(state, action) {
  switch (action.type) {
    care 'INCREASE_COUNT':
      return {count: state.count + 1}
    default:
      return state
  }
}
changeState(state, action) => {count: 1}

-Significance of Redux is to summarize, this is always the core flow of Redux:
ACTION ---> FUNCTION ---> UPDATED STATE

-Combination of current state and an action(reduces into 1 value)
-Reducer is the correct, technical term where an ACTION is sent to REDUCER then updates application STATE
ACTION ---> REDUCER ---> UPDATED STATE


REDUCERS ARE PURE FUNCTIONS
function reducer(state, action){
  switch (action.type) {
    case 'INCREASE_COUNT':
      return {count: state.count + 1}
    case 'DECREASE_COUNT'
      return {count: state.count - 1}
    default:
      return state;
  }
}

-Reducers are pure functions
1. Pure functions are only determined by their output values
  -Given the same input of a function, always will receive the same output from that function

2. Pure functions have no side effects, no effect outside of the function, they only return value
  -Returned object is not the same object that is passed as an argument to function
  -Rather a new object that is constructed each time the REDUCER is called
  -Stick to constraints of Pure Function by not changing any value that is defined outside of the fucntion

-Lack of side effects means the functions are predictable, contained and can be used without
affecting the rest of the application
-The specific reducer function never updates the previous state but rather creates a new state
object


OVERALL
1. Application state held in JavaScript object, updated by passing bot ACTION and old STATE to REDUCER
2. Change STATE by
  a. Creating and ACTION with object TYPE key
  b. Pass ACTION as an argument when REDUCER is called
  c. Then produces a new STATE
3. Reducer is a pure function that, given same arguments of state/action, will always produce same new
  STATE.  It never updates the previous STATE but rather creates a new STATE object
