ENCAPSULATE APPLICATION STATE BY WRAPPING IN A FUNCTION
(Follow along with redux-create-store-v)
-STATE variable defined at the stop of the code holds a representation of all the data needed to display
-Not good practice if variable is Global and can be overwritten

-Solve problem by wrapping STATE into a function
eg:
function() {
  let state
}
*When dispatch({type: '@@INIT'}) is called, the code breaks with error of DISPATCH is not defined
*RENDER() also won't have access to STATE


MOVE CODE COMMON TO JS APP INSIDE NEW FUNCTION
*Redux Pattern
ACTION ---> REDUCER ---> STATE
-DISPATCH is called with an ACTION that calls the REDUCER then returns the STATE
-Move DISPATCH inside new method to encapsulate both STATE and DISPATCH
eg:
function() {
  let state

  function dispatch(action) {
    state = changeState(state, action)
    render()
  }
}
*DISPATCH is now a private function
*Will still need to expose it in order to use certain events

*A function that has the DISPATCH function return a JS object called STORE
*Need to call a method name createStore
eg:
function createStore() {
  state

  dispatch function {
    ...code
  }

  return { dispatch }
}
*Code almost works

*Call createStore and set the returned STORE equal to a variable
*Change remaining code to ensure dispatch is properly referenced
(i don't know what's going on here, still receiving an error that changeState is not defined)
eg:
let store = createStore()
store.dispatch({type: '@@INIT'})
