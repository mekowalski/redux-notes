BENEFITS OF MOVING TO REDUX
Single Source Of Truth
-When React apps become larger, state becomes more spread out between different components
-Component tree will then become obscured on how comps are handling/sharing data with each other


Redux encourages storing all necessary data in application as plain JavaScript object separate from comps
eg:
state = {
  user: {
    name: 'malind',
    town: 'durango'
  },
  interests: [
    {
      name: 'running',
      type: 'sport'
    },
    {
      name: 'kickboxing',
      type: 'sport'
    }
  ]
}
*Similar to comp state, all data is held in an object
*Since Redux state is separate from comp tree, any part of this data can be grabbed for any component that
 needs it, by connecting components


ACCESSING THE STATE
-Provide access by wrapping the component tree(similar to Router), in order to make state available for
 components to connect to
-Access to Redux functions allow grabbing state & mapping it the props being given to a component
-Complex interaction between components is made easier
-Every component allowed can get and update state data regardless of the position on the component tree


UPDATING THE STATE
-All data is help in one place with some configuration, allowing reading as props in regular React comps
-To update data, send an action, set with strict instructions that Redux will allow use for updating
eg:
action = {
  type: 'ADD_INTEREST',
  newInterest: {
    name: 'programming',
    type: 'education'
  }
}
*Action -> State -> Updated State
*ACTION created telling REDUX how to incorporate the update into the STATE
*Any time Redux state is update, an action must be created first
*This action is simple plain JavaScript

-Actions maintain and update the Redux state
-These state changes will trigger React's Component Lifecycle and the cycle of data is made
