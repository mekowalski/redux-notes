BENEFITS OF MOVING TO REDUX
Single Source Of Truth
-When React apps become larger, state becomes more spread out between different components
-Component tree will then become obscured on how comps are handling/sharing data with each other


Redux encourages storing all necessary data in application as plain JavaScript object separate from comps
eg:
state = {
  user: {
    name: 'malind',
    town: 'durango'
  },
  interests: [
    {
      name: 'running',
      type: 'sport'
    },
    {
      name: 'kickboxing',
      type: 'sport'
    }
  ]
}
*Similar to comp state, all data is held in an object
*Since Redux state is separate from comp tree, any part of this data can be grabbed for any component that
 needs it, by connecting components


HOW TO HOLD UP STATE
The data is held in one place and upon updating, an action is sent with strict instructions Redux
uses for how to update
*anytime a state is updated in Redux, action must first be created in plain old JavaScript object*
action = {
  type: 'ADD_INTEREST',
  newInterest: {
    name: 'programming',
    type: 'education'
  }
}

How Redux allows update on state:
Action -> State -> Updated State
-Action combined with previous state leads to an updated state
