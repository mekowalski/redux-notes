//refer to redux/examples/todo-list

ACTIONS: Payloads of information that send data from the app to the STORE
-The ONLY source of information for the STORE
-Sent using store.dispatch()

-Actions are plain JS objects, that must have a TYPE property indicating the type of action being performed
-Actions describe WHAT HAPPENED, not how the application's STATE changes
-TYPES typically are defined as string constants
-Once App is large enough, consider moving TYPES into separate module
eg: import { ADD_TODO, REMOVE_TODO } from '../actionTypes'

*in the example project, create another action to describe User marking Todo completed alongside ADD_TODO*


ACTION CREATORS
-Functions that create ACTIONS!!!
-Redux action creators simply return ad ACTION
eg:
function addTodo(text) {
  return {
    type: ADD_TODO,
    text
  }
}
*Makes it easy to test
*Traditional Flux triggers an action creator when DISPATCH is invoked

-With Redux this isn't the case
-Initiating a DISPATCH, pass he result to dispatch() function
eg:
dispatch(addTodo(text))
dispatch(completeTodo(index))

-Bound Action Creator automatically dispatches
eg:
const boundAddTodo = text => dispatch(addTodo(text))
const boundCompleteTodo = index => dispatch(completeTodo(index))

-And call it directly
eg:
boundAddTodo(text)
boundCompleteTodo(index)

-Action Creators can be asynchronous and have side-effects
-dispatch() function can be accessed directly from STORE as store.dispatch()
-More likely to access it using helper connect()
