Redux in Three Fundamental Principles

1. Single Source of Truth
-The STATE of the whole application is stored in an object tree within a single STORE
-Easy to create universal apps
-A single tree also makes debugging or inspection of an application easier
-Persisting application's state in development for faster development cycle

-Some traditional and difficult functionality can suddenly become trivial to implement, if all the STATE is
 stored in a single tree
eg:
console.log(store.getState())
=>
{
  visibilityFilter: 'SHOW_ALL',
  todos: [
    {
      text: 'Consider using Redux',
      completed: true,
    },
    {
      text: 'Keep all state in a single tree',
      completed: false
    }
  ]
}


2. State is Read-Only
-The only way to change the STATE is the emit an ACTION, an object describing what happened
-Neither Views nor Callbacks will ever write directly to STATE
-They express an intent to transform STATE
-Actions are just plain objects that can be logged, serialized, stored and later replayed for debugging or
 testing purposes

eg:
store.dispatch({
  type: 'COMPLETE_TODO',
  index: 1
})

store.dispatch({
  type: 'SET_VISIBILITY_FILTER',
  filter: 'SHOW_COMPLETED'
})
