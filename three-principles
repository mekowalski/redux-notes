Redux in Three Fundamental Principles

1. Single Source of Truth
-The STATE of the whole application is stored in an object tree within a single STORE
-Easy to create universal apps
-A single tree also makes debugging or inspection of an application easier
-Persisting application's state in development for faster development cycle

-Some traditional and difficult functionality can suddenly become trivial to implement, if all the STATE is
 stored in a single tree
eg:
console.log(store.getState())
=>
{
  visibilityFilter: 'SHOW_ALL',
  todos: [
    {
      text: 'Consider using Redux',
      completed: true,
    },
    {
      text: 'Keep all state in a single tree',
      completed: false
    }
  ]
}


2. State is Read-Only
-The only way to change the STATE is the emit an ACTION, an object describing what happened
-Neither Views nor Callbacks will ever write directly to STATE
-They express an intent to transform STATE
-Actions are just plain objects that can be logged, serialized, stored and later replayed for debugging or
 testing purposes

eg:
store.dispatch({
  type: 'COMPLETE_TODO',
  index: 1
})

store.dispatch({
  type: 'SET_VISIBILITY_FILTER',
  filter: 'SHOW_COMPLETED'
})


3. Changes Are Made with Pure Functions
-Specify how STATE tree is transformed by ACTIONS, written by pure REDUCERS
-REDUCERS are pure functions taking in previousState and an ACTION and returning the nextState
-Return with a new state object, instead of mutating the previousState
-Start with a single REDUCER, with app growth, split into smaller REDUCERS that manage specific parts og
 STATE tree

-Since REDUCERS are functions, the order in which they're called in in programmer's control
eg:
//REDUCER
function visibilityFilter(state = 'SHOW_ALL', action) {
  switch (action.type) {
    case 'SET_VISIBILITY_FILTER':
      return action.filter
    default:
      return state
  }
}

//REDUCER
function todos(state = [], action) {
  switch (action.type) {
    case 'ADD_TODO':
      return [
        ...state,
        {
          text: action.text,
          completed: false
        }
      ]
    case 'COMPLETE_TODO':
      return state.map((todo, index) => {
        if (index === action.index) {
          return Object.assign({}, todo, {
            completed: true
          })
        }
        return todo
      })
    default:
      return state
  }
}

import { combineReducers, createStore } from 'redux'
const reducer = combineReducers({ visibilityFilter, todos })
const store = createStore(reducer)
